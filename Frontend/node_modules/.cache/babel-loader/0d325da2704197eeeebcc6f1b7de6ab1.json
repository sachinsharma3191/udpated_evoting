{"ast":null,"code":"import axios from \"axios\";\nimport _ from \"underscore\";\nimport * as actionTypes from \"./actionTypes\";\nimport { arrayBufferToBase64 } from \"../../util/utility\";\nconst base64Flag = \"data:image/jpeg;base64,\";\nexport const fetchCandidateStart = () => {\n  return {\n    type: actionTypes.FETCH_CANDIDATES_START\n  };\n};\nexport const fetchCandidate = () => {\n  return async dispatch => {\n    dispatch(fetchCandidateStart());\n    axios.get(\"http://localhost:3002/candidate/all\").then(res => {\n      let candidates = res.data.data;\n\n      for (let candidate of candidates) {\n        let candidate_id = candidate[\"id\"];\n        let name = candidate[\"first_name\"] + \"_\" + candidate[\"last_name\"];\n        axios.get(\"http://localhost:3002/candidate/image/\" + name).then(res => {\n          let imageStr = null;\n          imageStr = arrayBufferToBase64(res.data.image.data);\n          candidate[\"image\"] = base64Flag + imageStr;\n        }).catch(err => {\n          console.log(candidate);\n        });\n      }\n\n      dispatch(fetchCandidateSuccess(candidates));\n    }).catch(error => {\n      dispatch(fetchCandidateFail(error));\n    });\n  };\n};\nexport const fetchCandidateSuccess = candidates => {\n  return {\n    type: actionTypes.FETCH_CANDIDATES_SUCCESS,\n    candidates: candidates\n  };\n};\nexport const fetchCandidateFail = error => {\n  return {\n    type: actionTypes.FETCH_CANDIDATES_FAIL,\n    error: error\n  };\n};\nexport const fetchCandidateImageStart = candidate_id => {\n  return {\n    type: actionTypes.FETCH_CANDIDATE_IMAGE_START\n  };\n};\nexport const fetchCandidateImage = (candidates, name) => {\n  return dispatch => {\n    dispatch(fetchCandidateImageStart());\n    axios.get(\"http://localhost:3002/candidate/image/\" + name).then(res => {\n      let first_name = name.split(\"_\")[0];\n      let imageStr = null;\n      imageStr = arrayBufferToBase64(res.data.image.data);\n\n      for (let candidate of candidates) {\n        if (candidate.first_name === first_name) {\n          candidate[\"image\"] = base64Flag + imageStr;\n        }\n      }\n\n      dispatch(fetchCandidateImageSuccess(candidates));\n    }).catch(err => {\n      dispatch(fetchCandidateFail(err.response));\n    });\n  };\n};\nexport const fetchCandidateImageSuccess = candidates => {\n  return {\n    type: actionTypes.FETCH_CANDIDATE_IMAGE_SUCCESS,\n    candidates: candidates\n  };\n};\nexport const fetchCandidateImageFail = error => {\n  return {\n    type: actionTypes.FETCH_CANDIDATE_IMAGE_FAIL,\n    error: error\n  };\n};","map":{"version":3,"sources":["/Users/sachinsharma/evoting-react/Frontend/src/redux/actions/candidate.js"],"names":["axios","_","actionTypes","arrayBufferToBase64","base64Flag","fetchCandidateStart","type","FETCH_CANDIDATES_START","fetchCandidate","dispatch","get","then","res","candidates","data","candidate","candidate_id","name","imageStr","image","catch","err","console","log","fetchCandidateSuccess","error","fetchCandidateFail","FETCH_CANDIDATES_SUCCESS","FETCH_CANDIDATES_FAIL","fetchCandidateImageStart","FETCH_CANDIDATE_IMAGE_START","fetchCandidateImage","first_name","split","fetchCandidateImageSuccess","response","FETCH_CANDIDATE_IMAGE_SUCCESS","fetchCandidateImageFail","FETCH_CANDIDATE_IMAGE_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,YAAd;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AACA,SAASC,mBAAT,QAAoC,oBAApC;AAEA,MAAMC,UAAU,GAAG,yBAAnB;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAEJ,WAAW,CAACK;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAI,MAAM;AACnC,SAAO,MAAQC,QAAR,IAAqB;AAC1BA,IAAAA,QAAQ,CAACJ,mBAAmB,EAApB,CAAR;AACAL,IAAAA,KAAK,CACFU,GADH,CACO,qCADP,EAEGC,IAFH,CAESC,GAAD,IAAS;AACb,UAAIC,UAAU,GAAGD,GAAG,CAACE,IAAJ,CAASA,IAA1B;;AACA,WAAK,IAAIC,SAAT,IAAsBF,UAAtB,EAAkC;AAChC,YAAIG,YAAY,GAAGD,SAAS,CAAC,IAAD,CAA5B;AACA,YAAIE,IAAI,GAAGF,SAAS,CAAC,YAAD,CAAT,GAA0B,GAA1B,GAAgCA,SAAS,CAAC,WAAD,CAApD;AAEAf,QAAAA,KAAK,CACFU,GADH,CACO,2CAA2CO,IADlD,EAEGN,IAFH,CAESC,GAAD,IAAS;AACb,cAAIM,QAAQ,GAAG,IAAf;AACAA,UAAAA,QAAQ,GAAGf,mBAAmB,CAACS,GAAG,CAACE,IAAJ,CAASK,KAAT,CAAeL,IAAhB,CAA9B;AACAC,UAAAA,SAAS,CAAC,OAAD,CAAT,GAAqBX,UAAU,GAAGc,QAAlC;AACD,SANH,EAOGE,KAPH,CAOUC,GAAD,IAAS;AACdC,UAAAA,OAAO,CAACC,GAAR,CAAYR,SAAZ;AACD,SATH;AAUD;;AACDN,MAAAA,QAAQ,CAACe,qBAAqB,CAACX,UAAD,CAAtB,CAAR;AACD,KApBH,EAsBGO,KAtBH,CAsBUK,KAAD,IAAW;AAChBhB,MAAAA,QAAQ,CAACiB,kBAAkB,CAACD,KAAD,CAAnB,CAAR;AACD,KAxBH;AAyBD,GA3BD;AA4BD,CA7BM;AA+BP,OAAO,MAAMD,qBAAqB,GAAIX,UAAD,IAAgB;AACnD,SAAO;AACLP,IAAAA,IAAI,EAAEJ,WAAW,CAACyB,wBADb;AAELd,IAAAA,UAAU,EAAEA;AAFP,GAAP;AAID,CALM;AAOP,OAAO,MAAMa,kBAAkB,GAAID,KAAD,IAAW;AAC3C,SAAO;AACLnB,IAAAA,IAAI,EAAEJ,WAAW,CAAC0B,qBADb;AAELH,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAMI,wBAAwB,GAAIb,YAAD,IAAkB;AACxD,SAAO;AACLV,IAAAA,IAAI,EAAEJ,WAAW,CAAC4B;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,mBAAmB,GAAG,CAAClB,UAAD,EAAaI,IAAb,KAAsB;AACvD,SAAQR,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACoB,wBAAwB,EAAzB,CAAR;AACA7B,IAAAA,KAAK,CACFU,GADH,CACO,2CAA2CO,IADlD,EAEGN,IAFH,CAESC,GAAD,IAAS;AACb,UAAIoB,UAAU,GAAGf,IAAI,CAACgB,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAjB;AAEA,UAAIf,QAAQ,GAAG,IAAf;AACAA,MAAAA,QAAQ,GAAGf,mBAAmB,CAACS,GAAG,CAACE,IAAJ,CAASK,KAAT,CAAeL,IAAhB,CAA9B;;AACA,WAAK,IAAIC,SAAT,IAAsBF,UAAtB,EAAkC;AAChC,YAAIE,SAAS,CAACiB,UAAV,KAAyBA,UAA7B,EAAyC;AACvCjB,UAAAA,SAAS,CAAC,OAAD,CAAT,GAAqBX,UAAU,GAAGc,QAAlC;AACD;AACF;;AACDT,MAAAA,QAAQ,CAACyB,0BAA0B,CAACrB,UAAD,CAA3B,CAAR;AACD,KAbH,EAcGO,KAdH,CAcUC,GAAD,IAAS;AACdZ,MAAAA,QAAQ,CAACiB,kBAAkB,CAACL,GAAG,CAACc,QAAL,CAAnB,CAAR;AACD,KAhBH;AAiBD,GAnBD;AAoBD,CArBM;AAuBP,OAAO,MAAMD,0BAA0B,GAAIrB,UAAD,IAAgB;AACxD,SAAO;AACLP,IAAAA,IAAI,EAAEJ,WAAW,CAACkC,6BADb;AAELvB,IAAAA,UAAU,EAAEA;AAFP,GAAP;AAID,CALM;AAOP,OAAO,MAAMwB,uBAAuB,GAAIZ,KAAD,IAAW;AAChD,SAAO;AACLnB,IAAAA,IAAI,EAAEJ,WAAW,CAACoC,0BADb;AAELb,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM","sourcesContent":["import axios from \"axios\";\nimport _ from \"underscore\";\nimport * as actionTypes from \"./actionTypes\";\nimport { arrayBufferToBase64 } from \"../../util/utility\";\n\nconst base64Flag = \"data:image/jpeg;base64,\";\n\nexport const fetchCandidateStart = () => {\n  return {\n    type: actionTypes.FETCH_CANDIDATES_START,\n  };\n};\n\nexport const fetchCandidate =  () => {\n  return async  (dispatch) => {\n    dispatch(fetchCandidateStart());\n    axios\n      .get(\"http://localhost:3002/candidate/all\")\n      .then((res) => {\n        let candidates = res.data.data;\n        for (let candidate of candidates) {\n          let candidate_id = candidate[\"id\"];\n          let name = candidate[\"first_name\"] + \"_\" + candidate[\"last_name\"];\n\n          axios\n            .get(\"http://localhost:3002/candidate/image/\" + name)\n            .then((res) => {\n              let imageStr = null;\n              imageStr = arrayBufferToBase64(res.data.image.data);\n              candidate[\"image\"] = base64Flag + imageStr;\n            })\n            .catch((err) => {\n              console.log(candidate);\n            });\n        }\n        dispatch(fetchCandidateSuccess(candidates));\n      })\n\n      .catch((error) => {\n        dispatch(fetchCandidateFail(error));\n      });\n  };\n};\n\nexport const fetchCandidateSuccess = (candidates) => {\n  return {\n    type: actionTypes.FETCH_CANDIDATES_SUCCESS,\n    candidates: candidates,\n  };\n};\n\nexport const fetchCandidateFail = (error) => {\n  return {\n    type: actionTypes.FETCH_CANDIDATES_FAIL,\n    error: error,\n  };\n};\n\nexport const fetchCandidateImageStart = (candidate_id) => {\n  return {\n    type: actionTypes.FETCH_CANDIDATE_IMAGE_START,\n  };\n};\n\nexport const fetchCandidateImage = (candidates, name) => {\n  return (dispatch) => {\n    dispatch(fetchCandidateImageStart());\n    axios\n      .get(\"http://localhost:3002/candidate/image/\" + name)\n      .then((res) => {\n        let first_name = name.split(\"_\")[0];\n\n        let imageStr = null;\n        imageStr = arrayBufferToBase64(res.data.image.data);\n        for (let candidate of candidates) {\n          if (candidate.first_name === first_name) {\n            candidate[\"image\"] = base64Flag + imageStr;\n          }\n        }\n        dispatch(fetchCandidateImageSuccess(candidates));\n      })\n      .catch((err) => {\n        dispatch(fetchCandidateFail(err.response));\n      });\n  };\n};\n\nexport const fetchCandidateImageSuccess = (candidates) => {\n  return {\n    type: actionTypes.FETCH_CANDIDATE_IMAGE_SUCCESS,\n    candidates: candidates,\n  };\n};\n\nexport const fetchCandidateImageFail = (error) => {\n  return {\n    type: actionTypes.FETCH_CANDIDATE_IMAGE_FAIL,\n    error: error,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}