{"ast":null,"code":"import axios from \"axios\";\nimport _ from 'underscore';\nimport * as actionTypes from \"./actionTypes\";\n/*function addDays(date, days) {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n}*/\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  localStorage.removeItem(\"username\");\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 10000000000);\n  };\n};\nexport const auth = (email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://localhost:3002/login', {\n      username: email,\n      password: password\n    }).then(response => {\n      const responseData = response.data;\n      let expirationDate = new Date();\n      expirationDate.setMonth(expirationDate.getMonth() + 3);\n      localStorage.setItem(\"token\", \"sadasdasasdasdasd\");\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      localStorage.setItem(\"userid\", responseData.userid);\n      localStorage.setItem(\"username\", responseData.username); //Dispatch Actions\n\n      dispatch(authSuccess(\"asdassa\", responseData.username)); //dispatch(checkAuthTimeout(expirationDate));\n    }).catch(err => {\n      dispatch(authFail(err.response.data));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n      const loginDate = new Date();\n\n      if (loginDate >= expirationDate) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem(\"userId\");\n\n        if (!_.isUndefined(userId)) {\n          dispatch(logout());\n        }\n\n        dispatch(authSuccess(token, userId)); //dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/sachinsharma/evoting-react/Frontend/src/redux/actions/auth.js"],"names":["axios","_","actionTypes","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","post","username","then","response","responseData","data","expirationDate","Date","setMonth","getMonth","setItem","userid","catch","err","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem","loginDate","isUndefined"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport _ from 'underscore';\nimport * as actionTypes from \"./actionTypes\";\n\n/*function addDays(date, days) {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n}*/\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationDate\");\n    localStorage.removeItem(\"userId\");\n    localStorage.removeItem(\"username\");\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 10000000000);\n    };\n};\n\nexport const auth = (email, password) => {\n    return dispatch => {\n        dispatch(authStart());\n        axios.post('http://localhost:3002/login', \n            {\n                username: email,\n                password: password\n            })\n            .then(response => {\n                const responseData = response.data;\n                let expirationDate = new Date();\n                expirationDate.setMonth(expirationDate.getMonth() + 3);\n\n                localStorage.setItem(\"token\", \"sadasdasasdasdasd\");\n                localStorage.setItem(\"expirationDate\", expirationDate);\n                localStorage.setItem(\"userid\", responseData.userid);\n                localStorage.setItem(\"username\",responseData.username);\n                //Dispatch Actions\n                dispatch(authSuccess(\"asdassa\", responseData.username));\n                //dispatch(checkAuthTimeout(expirationDate));\n            })\n            .catch(err => {\n                dispatch(authFail(err.response.data));\n            }); \n    };\n};\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    };\n};\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n            const loginDate = new Date();\n            if (loginDate >= expirationDate) {\n                dispatch(logout());\n            } else {\n                const userId = localStorage.getItem(\"userId\");\n                if(!_.isUndefined(userId)){\n                    dispatch(logout());\n                }\n                dispatch(authSuccess(token, userId));\n                //dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n            }\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}