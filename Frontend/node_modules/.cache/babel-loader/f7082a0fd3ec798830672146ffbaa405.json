{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../../util/utility\";\nconst initialState = {\n  candidates: [],\n  error: null,\n  loading: true\n};\n\nconst fetchCandidateStart = (state, action) => {\n  return updateObject(state, {\n    loading: true\n  });\n};\n\nconst fetchCandidateSuccess = (state, action) => {\n  return updateObject(state, {\n    candidates: action.candidates,\n    loading: false\n  });\n};\n\nconst fetchCandidateFailure = (state, action) => {\n  return updateObject(state, {\n    error: action.error,\n    loading: false\n  });\n};\n\nconst fetchCandidateImageStart = (state, action) => {\n  return updateObject(state, {\n    loading: true\n  });\n};\n\nconst fetchCandidateImageSuccess = (state, action) => {\n  return updateObject(state, {\n    candidates: action.candidates,\n    loading: false\n  });\n};\n\nconst fetchCandidateImageFail = (state, action) => {\n  return updateObject(state, {\n    error: action.error,\n    loading: false\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_CANDIDATES_START:\n      return fetchCandidateStart(state, action);\n\n    case actionTypes.FETCH_CANDIDATES_SUCCESS:\n      return fetchCandidateSuccess(state, action);\n\n    case actionTypes.FETCH_CANDIDATES_FAIL:\n      return fetchCandidateFailure(state, action);\n\n    case actionTypes.FETCH_CANDIDATE_IMAGE_START:\n      return fetchCandidateImageStart(state, action);\n\n    case actionTypes.FETCH_CANDIDATE_IMAGE_SUCCESS:\n      return fetchCandidateImageSuccess(state, action);\n\n    case actionTypes.FETCH_CANDIDATE_IMAGE_FAIL:\n      return fetchCandidateImageFail(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/sachinsharma/evoting-react/Frontend/src/redux/reducers/candidate.js"],"names":["actionTypes","updateObject","initialState","candidates","error","loading","fetchCandidateStart","state","action","fetchCandidateSuccess","fetchCandidateFailure","fetchCandidateImageStart","fetchCandidateImageSuccess","fetchCandidateImageFail","reducer","type","FETCH_CANDIDATES_START","FETCH_CANDIDATES_SUCCESS","FETCH_CANDIDATES_FAIL","FETCH_CANDIDATE_IMAGE_START","FETCH_CANDIDATE_IMAGE_SUCCESS","FETCH_CANDIDATE_IMAGE_FAIL"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAAQC,YAAR,QAA2B,oBAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,OAAO,EAAE;AAHQ,CAArB;;AAMA,MAAMC,mBAAmB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,SAAOP,YAAY,CAACM,KAAD,EAAQ;AACvBF,IAAAA,OAAO,EAAE;AADc,GAAR,CAAnB;AAGH,CAJD;;AAMA,MAAMI,qBAAqB,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC7C,SAAOP,YAAY,CAACM,KAAD,EAAQ;AACvBJ,IAAAA,UAAU,EAAEK,MAAM,CAACL,UADI;AAEvBE,IAAAA,OAAO,EAAE;AAFc,GAAR,CAAnB;AAIH,CALD;;AAOA,MAAMK,qBAAqB,GAAG,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC7C,SAAOP,YAAY,CAACM,KAAD,EAAQ;AACvBH,IAAAA,KAAK,EAAEI,MAAM,CAACJ,KADS;AAEvBC,IAAAA,OAAO,EAAE;AAFc,GAAR,CAAnB;AAIH,CALD;;AAOA,MAAMM,wBAAwB,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAChD,SAAOP,YAAY,CAACM,KAAD,EAAQ;AACvBF,IAAAA,OAAO,EAAE;AADc,GAAR,CAAnB;AAGH,CAJD;;AAMA,MAAMO,0BAA0B,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAClD,SAAOP,YAAY,CAACM,KAAD,EAAQ;AACvBJ,IAAAA,UAAU,EAAEK,MAAM,CAACL,UADI;AAEvBE,IAAAA,OAAO,EAAE;AAFc,GAAR,CAAnB;AAIH,CALD;;AAOA,MAAMQ,uBAAuB,GAAG,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC/C,SAAOP,YAAY,CAACM,KAAD,EAAQ;AACvBH,IAAAA,KAAK,EAAEI,MAAM,CAACJ,KADS;AAEvBC,IAAAA,OAAO,EAAE;AAFc,GAAR,CAAnB;AAIH,CALD;;AAOA,MAAMS,OAAO,GAAG,CAACP,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACO,IAAf;AACI,SAAKf,WAAW,CAACgB,sBAAjB;AACI,aAAOV,mBAAmB,CAACC,KAAD,EAAQC,MAAR,CAA1B;;AACJ,SAAKR,WAAW,CAACiB,wBAAjB;AACI,aAAOR,qBAAqB,CAACF,KAAD,EAAQC,MAAR,CAA5B;;AACJ,SAAKR,WAAW,CAACkB,qBAAjB;AACI,aAAOR,qBAAqB,CAACH,KAAD,EAAQC,MAAR,CAA5B;;AACJ,SAAKR,WAAW,CAACmB,2BAAjB;AACI,aAAOR,wBAAwB,CAACJ,KAAD,EAAQC,MAAR,CAA/B;;AACJ,SAAKR,WAAW,CAACoB,6BAAjB;AACI,aAAOR,0BAA0B,CAACL,KAAD,EAAQC,MAAR,CAAjC;;AACJ,SAAKR,WAAW,CAACqB,0BAAjB;AACI,aAAOR,uBAAuB,CAACN,KAAD,EAAQC,MAAR,CAA9B;;AACJ;AACI,aAAOD,KAAP;AAdR;AAgBH,CAjBD;;AAmBA,eAAeO,OAAf","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\nimport {updateObject} from \"../../util/utility\";\n\nconst initialState = {\n    candidates: [],\n    error: null,\n    loading: true,\n};\n\nconst fetchCandidateStart = (state, action) => {\n    return updateObject(state, {\n        loading: true\n    });\n};\n\nconst fetchCandidateSuccess = (state, action) => {\n    return updateObject(state, {\n        candidates: action.candidates,\n        loading: false,\n    });\n};\n\nconst fetchCandidateFailure = (state, action) => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false\n    });\n};\n\nconst fetchCandidateImageStart = (state, action) => {\n    return updateObject(state, {\n        loading: true\n    });\n};\n\nconst fetchCandidateImageSuccess = (state, action) => {\n    return updateObject(state, {\n        candidates: action.candidates,\n        loading: false\n    });\n};\n\nconst fetchCandidateImageFail = (state, action) => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false\n    });\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_CANDIDATES_START:\n            return fetchCandidateStart(state, action);\n        case actionTypes.FETCH_CANDIDATES_SUCCESS:\n            return fetchCandidateSuccess(state, action);\n        case actionTypes.FETCH_CANDIDATES_FAIL:\n            return fetchCandidateFailure(state, action);\n        case actionTypes.FETCH_CANDIDATE_IMAGE_START:\n            return fetchCandidateImageStart(state, action);\n        case actionTypes.FETCH_CANDIDATE_IMAGE_SUCCESS:\n            return fetchCandidateImageSuccess(state, action);\n        case actionTypes.FETCH_CANDIDATE_IMAGE_FAIL:\n            return fetchCandidateImageFail(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}